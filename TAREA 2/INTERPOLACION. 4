# CUARTO LAGRANGE

# Función de Lagrange para calcular L_i(x)
def Lagrange(x, X, i):
    L = 1
    for j in range(len(X)):
        if i != j:
            L *= (x - X[j]) / (X[i] - X[j])
    return L

# Interpolación de Lagrange para estimar y en un punto x dado
def interpolar_Lagrange(x, X, Y):
    y_interp = 0
    for i in range(len(X)):
        y_interp += Y[i] * Lagrange(x, X, i)
    return y_interp

# Datos
X = np.array([1.4, 3.5, 5.6])
Y = np.array([0.4007954931819738, 0.594128102489774, 0.29802795523938164])

# Evaluamos en varios puntos para obtener la curva de interpolación
x_vals = np.linspace(min(X), max(X), 100)
y_vals = [interpolar_Lagrange(x, X, Y) for x in x_vals]

# Luego de la interpolación:

coeffs = np.polyfit(X, Y, 2)
a2, a1, a0 = coeffs

# Ajuste cuadrático a los puntos originales
coeffs = np.polyfit(X, Y, 2)
a2, a1, a0 = coeffs

# Calcular θ y v0
g = 9.8  # aceleración debida a la gravedad
theta = (np.arctan(a1))  # θ = arctan(a1)
v0 = np.sqrt(-g / (2 * a2 * np.cos(theta)**2))  # v0 = sqrt(-g / (2 * a2 * cos²(θ)))
theta_en_grados = theta*(180/np.pi)
